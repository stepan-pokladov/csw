services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "host.docker.internal:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka topics creation service
  kafka-topics-init:
    image: bitnami/kafka:latest
    container_name: kafka-topics-init
    depends_on:
      - kafka
    entrypoint:
      - /bin/bash
      - -c
      - |
        # Wait for Kafka to be ready
        cub kafka-ready -b kafka:9092 1 20 && \
        # Create topics "activity" and "visit"
        kafka-topics.sh --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic activity && \
        kafka-topics.sh --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic visit

  client:
    build:
      context: ./client
    depends_on:
      - server
    environment:
      SERVER_URL: http://server:8080
      CLIENT_COUNT: 5
      REPORT_INTERVAL: 5

  server:
    build:
      context: ./server
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_HOST: kafka:9092
      PORT: 8080
    ports:
      - "8080:8080"
    entrypoint:
      - /bin/sh
      - -c
      - |
        # Wait for Kafka to be ready
        until nc -z kafka 9092; do
          echo "Waiting for Kafka to be ready..."
          sleep 2
        done
        exec ./server

  worker:
    build:
      context: ./worker
    volumes:
      - /tmp/logs:/app/logs
    depends_on:
      - server
    environment:
      KAFKA_HOST: kafka:9092

  prometheus:
    image: prom/prometheus:v3.0.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped
  
  grafana:
    image: grafana/grafana:11.3.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped

